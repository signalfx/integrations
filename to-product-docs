#!/usr/bin/env python3

import os
import shutil
import sys

from helpers import legacy
from helpers.agent_docs import move_smart_agent_docs
from helpers.markdown import render_template
from helpers.paths import OUTPUT_DOC_PATH, OUTPUT_IMAGE_PATH
from helpers.util import all_integrations, get_integration, uses_legacy_build


def move_images(integration_dir, rendered_doc):
    target_dir = OUTPUT_IMAGE_PATH / integration_dir.name

    try:
        shutil.rmtree(target_dir)
    except OSError:
        pass
    os.mkdir(target_dir)

    for image_path in integration_dir.glob("img/**/*"):
        # Skip images whose filename doesn't appear in the rendered doc.
        if image_path.name not in rendered_doc:
            continue

        base_path = image_path.relative_to(integration_dir / "img")
        target_path = target_dir / base_path
        shutil.copyfile(image_path, target_path)


def process_all():
    for integration_dir, meta in all_integrations():
        process_integration(integration_dir, meta)


def process_integration(integration_dir, meta):
    if uses_legacy_build(meta):
        legacy.process_integration(integration_dir)
    else:
        readme_path = integration_dir / "README.md.jinja"
        rendered = render_template(readme_path.read_text(encoding="utf-8"), integration_dir, {"target": "docs"})
        core_name = meta.get("product_docs_name", integration_dir.name)
        target_path = OUTPUT_DOC_PATH / f"integrations.{core_name}.md"
        target_path.write_text(rendered)

        move_images(integration_dir, rendered)


if __name__ == "__main__":
    integration = None
    if len(sys.argv) > 1:
        integration = sys.argv[1].strip()

    if integration:
        print(f"Processing integration {integration}")
        process_integration(*get_integration(integration))
        sys.exit(0)

    # Remove once all integrations are migrated from legacy build system.
    legacy.prepare()
    move_smart_agent_docs()

    process_all()
